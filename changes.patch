diff --git a/src/main/java/com/ellu/looper/admin/AdminController.java b/src/main/java/com/ellu/looper/admin/AdminController.java
index 80e0047..51d019f 100644
--- a/src/main/java/com/ellu/looper/admin/AdminController.java
+++ b/src/main/java/com/ellu/looper/admin/AdminController.java
@@ -68,7 +68,9 @@ public class AdminController {
             NotificationType.SCHEDULE_DELETED,
             "{project}프로젝트의 {schedule} 일정이 삭제되었습니다.",
             NotificationType.INVITATION_PROCESSED,
-            "회원님이 {receiver}님께 보낸 {project} 프로젝트 초대 요청이 {status}되었습니다.");
+            "회원님이 {receiver}님께 보낸 {project} 프로젝트 초대 요청이 {status}되었습니다.",
+            NotificationType.PROJECT_WIKI_READY,
+            "{project} 프로젝트가 준비되었습니다. 이제 회의록을 업로드해서 일정을 추출하고, 캘린더에 반영해 팀원들과 공유해 보세요.");
 
     List<NotificationTemplate> savedTemplates = new ArrayList<>();
 
diff --git a/src/main/java/com/ellu/looper/commons/enums/NotificationType.java b/src/main/java/com/ellu/looper/commons/enums/NotificationType.java
index d0ced83..afa86bc 100644
--- a/src/main/java/com/ellu/looper/commons/enums/NotificationType.java
+++ b/src/main/java/com/ellu/looper/commons/enums/NotificationType.java
@@ -7,5 +7,6 @@ public enum NotificationType {
   SCHEDULE_CREATED,
   SCHEDULE_UPDATED,
   SCHEDULE_DELETED,
-  INVITATION_PROCESSED
+  INVITATION_PROCESSED,
+  PROJECT_WIKI_READY
 }
diff --git a/src/main/java/com/ellu/looper/fastapi/controller/FastApiCallbackController.java b/src/main/java/com/ellu/looper/fastapi/controller/FastApiCallbackController.java
index 5f6e4d4..a527041 100644
--- a/src/main/java/com/ellu/looper/fastapi/controller/FastApiCallbackController.java
+++ b/src/main/java/com/ellu/looper/fastapi/controller/FastApiCallbackController.java
@@ -1,7 +1,8 @@
 package com.ellu.looper.fastapi.controller;
 
+import com.ellu.looper.fastapi.dto.MeetingNoteResponse;
+import com.ellu.looper.fastapi.dto.WikiEmbeddingResponse;
 import com.ellu.looper.fastapi.service.FastApiService;
-import com.ellu.looper.project.dto.MeetingNoteResponse;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.http.ResponseEntity;
@@ -47,4 +48,21 @@ public class FastApiCallbackController {
         "[FastApiCallbackController] Successfully processed callback for project: {}", projectId);
     return ResponseEntity.ok().build(); // AI에게 200 OK 응답
   }
+
+  @PostMapping("/wiki")
+  public ResponseEntity<?> receiveWikiCompletion(
+      @RequestBody WikiEmbeddingResponse wikiEmbeddingResponse) {
+    Long projectId = wikiEmbeddingResponse.getProject_id();
+    log.info(
+        "[FastApiCallbackController] Received callback for project with id {} for wiki embedding completion",
+        projectId);
+    log.info("[FastApiCallbackController] Response status: {}", wikiEmbeddingResponse.getStatus());
+
+    aiCallbackService.handleWikiEmbeddingCompletion(projectId, wikiEmbeddingResponse);
+
+    log.info(
+        "[FastApiCallbackController] Successfully processed wiki embedding completion callback for project with id {}",
+        projectId);
+    return ResponseEntity.ok().build(); // AI에게 200 OK 응답
+  }
 }
diff --git a/src/main/java/com/ellu/looper/project/dto/MeetingNoteRequest.java b/src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteRequest.java
similarity index 89%
rename from src/main/java/com/ellu/looper/project/dto/MeetingNoteRequest.java
rename to src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteRequest.java
index c88856c..de88ee8 100644
--- a/src/main/java/com/ellu/looper/project/dto/MeetingNoteRequest.java
+++ b/src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteRequest.java
@@ -1,4 +1,4 @@
-package com.ellu.looper.project.dto;
+package com.ellu.looper.fastapi.dto;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
diff --git a/src/main/java/com/ellu/looper/project/dto/MeetingNoteResponse.java b/src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteResponse.java
similarity index 94%
rename from src/main/java/com/ellu/looper/project/dto/MeetingNoteResponse.java
rename to src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteResponse.java
index 841f311..1f157f5 100644
--- a/src/main/java/com/ellu/looper/project/dto/MeetingNoteResponse.java
+++ b/src/main/java/com/ellu/looper/fastapi/dto/MeetingNoteResponse.java
@@ -1,4 +1,4 @@
-package com.ellu.looper.project.dto;
+package com.ellu.looper.fastapi.dto;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import java.util.List;
diff --git a/src/main/java/com/ellu/looper/fastapi/dto/WikiEmbeddingResponse.java b/src/main/java/com/ellu/looper/fastapi/dto/WikiEmbeddingResponse.java
new file mode 100644
index 0000000..9bd8341
--- /dev/null
+++ b/src/main/java/com/ellu/looper/fastapi/dto/WikiEmbeddingResponse.java
@@ -0,0 +1,17 @@
+package com.ellu.looper.fastapi.dto;
+
+import java.time.LocalDateTime;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Getter
+@Builder(toBuilder = true)
+public class WikiEmbeddingResponse {
+  private Long project_id;
+  private String status;
+  private LocalDateTime embedded_at;
+}
diff --git a/src/main/java/com/ellu/looper/fastapi/service/FastApiService.java b/src/main/java/com/ellu/looper/fastapi/service/FastApiService.java
index 13d724b..61a3406 100644
--- a/src/main/java/com/ellu/looper/fastapi/service/FastApiService.java
+++ b/src/main/java/com/ellu/looper/fastapi/service/FastApiService.java
@@ -2,10 +2,18 @@ package com.ellu.looper.fastapi.service;
 
 import com.ellu.looper.chat.dto.MessageRequest;
 import com.ellu.looper.commons.PreviewHolder;
-import com.ellu.looper.project.dto.MeetingNoteRequest;
-import com.ellu.looper.project.dto.MeetingNoteResponse;
+import com.ellu.looper.commons.enums.NotificationType;
+import com.ellu.looper.fastapi.dto.MeetingNoteRequest;
+import com.ellu.looper.fastapi.dto.MeetingNoteResponse;
+import com.ellu.looper.fastapi.dto.WikiEmbeddingResponse;
+import com.ellu.looper.notification.service.NotificationService;
 import com.ellu.looper.project.dto.WikiRequest;
+import com.ellu.looper.project.entity.Project;
+import com.ellu.looper.project.entity.ProjectMember;
+import com.ellu.looper.project.repository.ProjectMemberRepository;
+import com.ellu.looper.project.repository.ProjectRepository;
 import java.time.Duration;
+import java.util.List;
 import java.util.function.Consumer;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
@@ -21,11 +29,13 @@ public class FastApiService {
 
   private final WebClient webClient;
   private final PreviewHolder previewHolder;
+  private final NotificationService notificationService;
+  private final ProjectRepository projectRepository;
+  private final ProjectMemberRepository projectMemberRepository;
 
   // AI 서버로부터 응답을 전달받아 처리
   public void handleAiPreviewResponse(Long projectId, MeetingNoteResponse aiResponse) {
     log.info("[FastApiService] Handling AI preview response for project: {}", projectId);
-    log.info("[FastApiService] Response message: {}", aiResponse.getMessage());
 
     if (aiResponse.getDetail() != null) {
       aiResponse
@@ -46,6 +56,29 @@ public class FastApiService {
         "[FastApiService] Successfully handled AI preview response for project: {}", projectId);
   }
 
+  public void handleWikiEmbeddingCompletion(
+      Long projectId, WikiEmbeddingResponse wikiEmbeddingResponse) {
+    log.info("[FastApiService] Handling wiki embedding response for project: {}", projectId);
+    if (wikiEmbeddingResponse.getStatus().equals("embedding_done")) {
+      Project project =
+          projectRepository
+              .findByIdAndDeletedAtIsNull(projectId)
+              .orElseThrow(() -> new IllegalArgumentException("Project not found"));
+
+      List<ProjectMember> members =
+          projectMemberRepository.findByProjectAndDeletedAtIsNull(project);
+
+      notificationService.sendProjectNotification(
+          NotificationType.PROJECT_WIKI_READY, members, null, project);
+
+    } else {
+      log.warn("[FastApiService] Wiki embedding not completed yet.");
+    }
+    log.info(
+        "[FastApiService] Successfully handled wiki completion response for project: {}",
+        projectId);
+  }
+
   // 예외 상황 처리
   public void handleAiPreviewError(Long projectId, Throwable error) {
     previewHolder.completeWithError(projectId, error);
diff --git a/src/main/java/com/ellu/looper/notification/service/NotificationService.java b/src/main/java/com/ellu/looper/notification/service/NotificationService.java
index c738b37..2d95893 100644
--- a/src/main/java/com/ellu/looper/notification/service/NotificationService.java
+++ b/src/main/java/com/ellu/looper/notification/service/NotificationService.java
@@ -10,10 +10,12 @@ import com.ellu.looper.notification.entity.Notification;
 import com.ellu.looper.notification.entity.NotificationTemplate;
 import com.ellu.looper.notification.repository.NotificationRepository;
 import com.ellu.looper.notification.repository.NotificationTemplateRepository;
+import com.ellu.looper.project.dto.AddedMember;
 import com.ellu.looper.project.entity.Project;
 import com.ellu.looper.project.entity.ProjectMember;
 import com.ellu.looper.project.repository.ProjectMemberRepository;
 import com.ellu.looper.user.entity.User;
+import com.ellu.looper.user.repository.UserRepository;
 import java.time.LocalDateTime;
 import java.util.HashMap;
 import java.util.List;
@@ -34,6 +36,7 @@ public class NotificationService {
   private final ProjectMemberRepository projectMemberRepository;
   private final NotificationTemplateRepository notificationTemplateRepository;
   private final NotificationProducer notificationProducer;
+  private final UserRepository userRepository;
 
   @Transactional
   public void softDeleteOldNotifications() {
@@ -63,7 +66,8 @@ public class NotificationService {
               if (type.equals(NotificationType.PROJECT_INVITED)) {
                 message = renderInvitationTemplate(n.getTemplate().getTemplate(), n);
               } else if (type.equals(NotificationType.PROJECT_DELETED)
-                  || type.equals(NotificationType.PROJECT_EXPELLED)) {
+                  || type.equals(NotificationType.PROJECT_EXPELLED)
+                  || type.equals(NotificationType.PROJECT_WIKI_READY)) {
                 message = renderProjectTemplate(n.getTemplate().getTemplate(), n);
               } else if (type.equals(NotificationType.SCHEDULE_CREATED)
                   || type.equals(NotificationType.SCHEDULE_UPDATED)
@@ -110,6 +114,103 @@ public class NotificationService {
         .replace("{project}", notification.getPayload().get("project").toString());
   }
 
+  @Transactional
+  public void sendProjectNotification(
+      NotificationType type, List<ProjectMember> toRemove, Long creatorId, Project project) {
+    User creator =
+        userRepository
+            .findById(creatorId)
+            .orElseThrow(() -> new IllegalArgumentException("Project creator not found"));
+
+    // Notification 생성
+    NotificationTemplate inviteTemplate =
+        notificationTemplateRepository
+            .findByType(type)
+            .orElseThrow(() -> new IllegalArgumentException("프로젝트 알림 템플릿 없음"));
+
+    Map<String, Object> payload = new HashMap<>();
+    payload.put("project", project.getTitle());
+
+    for (ProjectMember member : toRemove) {
+      User receiver =
+          userRepository
+              .findById(member.getUser().getId())
+              .orElseThrow(
+                  () ->
+                      new IllegalArgumentException(
+                          "Project notification receiver with id "
+                              + member.getUser().getId()
+                              + " not found"));
+
+      Notification notification =
+          Notification.builder()
+              .sender(creator)
+              .receiver(receiver)
+              .project(project)
+              .template(inviteTemplate)
+              .payload(payload)
+              .createdAt(LocalDateTime.now())
+              .build();
+      notificationRepository.save(notification);
+
+      // Kafka를 통해 알림 메시지 전송
+      NotificationMessage message =
+          new NotificationMessage(
+              type.toString(),
+              notification.getId(),
+              project.getId(),
+              creator.getId(),
+              List.of(member.getUser().getId()),
+              renderProjectTemplate(inviteTemplate.getTemplate(), notification));
+
+      log.info("TRYING TO SEND KAFKA MESSAGE: {}", message.getMessage());
+      notificationProducer.sendNotification(message);
+    }
+  }
+
+  public void sendInvitationNotification(
+      List<User> addedUsers, User creator, Project project, List<AddedMember> addedMemberRequests) {
+    // Notification 생성
+    NotificationTemplate inviteTemplate =
+        notificationTemplateRepository
+            .findByType(NotificationType.PROJECT_INVITED)
+            .orElseThrow(() -> new IllegalArgumentException("초대 알림 템플릿 없음"));
+    Map<String, String> nicknameToPosition =
+        addedMemberRequests.stream()
+            .collect(Collectors.toMap(AddedMember::getNickname, AddedMember::getPosition));
+
+    for (User user : addedUsers) {
+      Map<String, Object> payload = new HashMap<>();
+      payload.put("creator", creator.getNickname());
+      payload.put("project", project.getTitle());
+      payload.put("position", nicknameToPosition.get(user.getNickname()));
+      Notification notification =
+          Notification.builder()
+              .sender(creator)
+              .receiver(user)
+              .project(project)
+              .template(inviteTemplate)
+              .payload(payload)
+              .inviteStatus(String.valueOf(InviteStatus.PENDING))
+              .createdAt(LocalDateTime.now())
+              .build();
+      notificationRepository.save(notification);
+
+      // Kafka를 통해 알림 메시지 전송
+      NotificationMessage message =
+          new NotificationMessage(
+              NotificationType.PROJECT_INVITED.toString(),
+              notification.getId(),
+              project.getId(),
+              creator.getId(),
+              List.of(user.getId()),
+              renderInvitationTemplate(inviteTemplate.getTemplate(), notification));
+
+      log.info("TRYING TO SEND KAFKA MESSAGE: {}", message.getMessage());
+      notificationProducer.sendNotification(message);
+    }
+  }
+
   @Transactional
   public NotificationDto respondToInvitation(Long notificationId, Long userId, String status) {
     Notification notification =
diff --git a/src/main/java/com/ellu/looper/project/controller/MeetingNoteController.java b/src/main/java/com/ellu/looper/project/controller/MeetingNoteController.java
index 06f8a88..5db1d4c 100644
--- a/src/main/java/com/ellu/looper/project/controller/MeetingNoteController.java
+++ b/src/main/java/com/ellu/looper/project/controller/MeetingNoteController.java
@@ -3,8 +3,8 @@ package com.ellu.looper.project.controller;
 import com.ellu.looper.commons.ApiResponse;
 import com.ellu.looper.commons.CurrentUser;
 import com.ellu.looper.commons.PreviewHolder;
+import com.ellu.looper.fastapi.dto.MeetingNoteRequest;
 import com.ellu.looper.fastapi.service.FastApiService;
-import com.ellu.looper.project.dto.MeetingNoteRequest;
 import com.ellu.looper.project.entity.ProjectMember;
 import com.ellu.looper.project.repository.ProjectMemberRepository;
 import com.ellu.looper.user.repository.UserRepository;
diff --git a/src/main/java/com/ellu/looper/project/service/ProjectService.java b/src/main/java/com/ellu/looper/project/service/ProjectService.java
index 9456577..1904f92 100644
--- a/src/main/java/com/ellu/looper/project/service/ProjectService.java
+++ b/src/main/java/com/ellu/looper/project/service/ProjectService.java
@@ -1,14 +1,10 @@
 package com.ellu.looper.project.service;
 
 import com.ellu.looper.commons.enums.Color;
-import com.ellu.looper.commons.enums.InviteStatus;
 import com.ellu.looper.commons.enums.NotificationType;
 import com.ellu.looper.commons.enums.Role;
 import com.ellu.looper.fastapi.service.FastApiService;
 import com.ellu.looper.kafka.NotificationProducer;
-import com.ellu.looper.kafka.dto.NotificationMessage;
-import com.ellu.looper.notification.entity.Notification;
-import com.ellu.looper.notification.entity.NotificationTemplate;
 import com.ellu.looper.notification.repository.NotificationRepository;
 import com.ellu.looper.notification.repository.NotificationTemplateRepository;
 import com.ellu.looper.notification.service.NotificationService;
@@ -148,55 +144,12 @@ public class ProjectService {
 
     log.info("Sending invitation notification to project members");
     // 초대 알림 보내기
-    sendInvitationNotification(addedUsers, creator, project, request.getAdded_members());
+    notificationService.sendInvitationNotification(
+        addedUsers, creator, project, request.getAdded_members());
 
     log.info("Project created successfully with ID: {}", project.getId());
   }
 
-  private void sendInvitationNotification(
-      List<User> addedUsers, User creator, Project project, List<AddedMember> addedMemberRequests) {
-    // Notification 생성
-    NotificationTemplate inviteTemplate =
-        notificationTemplateRepository
-            .findByType(NotificationType.PROJECT_INVITED)
-            .orElseThrow(() -> new IllegalArgumentException("초대 알림 템플릿 없음"));
-    Map<String, String> nicknameToPosition =
-        addedMemberRequests.stream()
-            .collect(Collectors.toMap(AddedMember::getNickname, AddedMember::getPosition));
-
-    for (User user : addedUsers) {
-      Map<String, Object> payload = new HashMap<>();
-      payload.put("creator", creator.getNickname());
-      payload.put("project", project.getTitle());
-      payload.put("position", nicknameToPosition.get(user.getNickname()));
-      Notification notification =
-          Notification.builder()
-              .sender(creator)
-              .receiver(user)
-              .project(project)
-              .template(inviteTemplate)
-              .payload(payload)
-              .inviteStatus(String.valueOf(InviteStatus.PENDING))
-              .createdAt(LocalDateTime.now())
-              .build();
-      notificationRepository.save(notification);
-
-      // Kafka를 통해 알림 메시지 전송
-      NotificationMessage message =
-          new NotificationMessage(
-              NotificationType.PROJECT_INVITED.toString(),
-              notification.getId(),
-              project.getId(),
-              creator.getId(),
-              List.of(user.getId()),
-              notificationService.renderInvitationTemplate(
-                  inviteTemplate.getTemplate(), notification));
-
-      log.info("TRYING TO SEND KAFKA MESSAGE: {}", message.getMessage());
-      notificationProducer.sendNotification(message);
-    }
-  }
-
   @Transactional(readOnly = true)
   public List<ProjectResponse> getProjects(Long userId) {
     log.info("Getting projects for user: {}", userId);
@@ -323,7 +276,8 @@ public class ProjectService {
     projectMemberRepository.saveAll(members);
 
     // send deletion notification
-    sendProjectNotification(NotificationType.PROJECT_DELETED, members, userId, project);
+    notificationService.sendProjectNotification(
+        NotificationType.PROJECT_DELETED, members, userId, project);
   }
 
   @Transactional
@@ -405,7 +359,8 @@ public class ProjectService {
     projectMemberRepository.saveAll(toRemove);
 
     // send expulsion notification
-    sendProjectNotification(NotificationType.PROJECT_EXPELLED, toRemove, userId, project);
+    notificationService.sendProjectNotification(
+        NotificationType.PROJECT_EXPELLED, toRemove, userId, project);
 
     // 새로운 멤버 추가 및 포지션 업데이트
     List<User> newlyInvitedUsers = new ArrayList<>();
@@ -441,7 +396,8 @@ public class ProjectService {
                           .anyMatch(user -> user.getNickname().equals(member.getNickname())))
               .collect(Collectors.toList());
 
-      sendInvitationNotification(newlyInvitedUsers, creator.getUser(), project, newlyAddedMembers);
+      notificationService.sendInvitationNotification(
+          newlyInvitedUsers, creator.getUser(), project, newlyAddedMembers);
     }
 
     // 위키 내용이 있다면 수정
@@ -459,60 +415,6 @@ public class ProjectService {
     log.info("Project updated successfully: {}", projectId);
   }
 
-  private void sendProjectNotification(
-      NotificationType type, List<ProjectMember> toRemove, Long creatorId, Project project) {
-    User creator =
-        userRepository
-            .findById(creatorId)
-            .orElseThrow(() -> new IllegalArgumentException("Project creator not found"));
-
-    // Notification 생성
-    NotificationTemplate inviteTemplate =
-        notificationTemplateRepository
-            .findByType(type)
-            .orElseThrow(() -> new IllegalArgumentException("프로젝트 알림 템플릿 없음"));
-
-    Map<String, Object> payload = new HashMap<>();
-    payload.put("project", project.getTitle());
-
-    for (ProjectMember member : toRemove) {
-      User receiver =
-          userRepository
-              .findById(member.getUser().getId())
-              .orElseThrow(
-                  () ->
-                      new IllegalArgumentException(
-                          "Project notification receiver with id "
-                              + member.getUser().getId()
-                              + " not found"));
-
-      Notification notification =
-          Notification.builder()
-              .sender(creator)
-              .receiver(receiver)
-              .project(project)
-              .template(inviteTemplate)
-              .payload(payload)
-              .createdAt(LocalDateTime.now())
-              .build();
-      notificationRepository.save(notification);
-
-      // Kafka를 통해 알림 메시지 전송
-      NotificationMessage message =
-          new NotificationMessage(
-              type.toString(),
-              notification.getId(),
-              project.getId(),
-              creator.getId(),
-              List.of(member.getUser().getId()),
-              notificationService.renderProjectTemplate(
-                  inviteTemplate.getTemplate(), notification));
-
-      log.info("TRYING TO SEND KAFKA MESSAGE: {}", message.getMessage());
-      notificationProducer.sendNotification(message);
-    }
-  }
-
   @Transactional
   public void createWiki(Long projectId, Long userId, WikiRequest request) {
     Project project =
diff --git a/src/main/java/com/ellu/looper/repository/NotificationRepository.java b/src/main/java/com/ellu/looper/repository/NotificationRepository.java
deleted file mode 100644
index 8b13789..0000000
--- a/src/main/java/com/ellu/looper/repository/NotificationRepository.java
+++ /dev/null
@@ -1 +0,0 @@
-
