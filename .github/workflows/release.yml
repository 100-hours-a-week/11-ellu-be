name: Release
on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 100-hours-a-week/looper-be
permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release
        run: |
          npm init -y
          npm install --save-dev semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/exec

      - name: Create semantic-release config
        run: |
          echo '{
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/exec", {
                "prepareCmd": "sed -i \"s/version = '\''.*'\''/version = '\''${nextRelease.version}'\''/g\" build.gradle || sed -i \"s/version = \\\".*\\\"/version = \\\"${nextRelease.version}\\\"/g\" build.gradle"
              }],
              ["@semantic-release/git", {
                "assets": ["build.gradle", "CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}"
              }],
              "@semantic-release/github"
            ]
          }' > .releaserc.json

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          npx semantic-release
          echo "new-release-published=true" >> $GITHUB_OUTPUT
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "new-release-version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT

  docker-build:
    name: Build and Publish Docker Image
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.semantic-release.outputs.new-release-version }}
          token: ${{ secrets.GH_PAT }}
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
      - name: Build container image
        run: |
          chmod +x gradlew 
          ./gradlew :spotlessApply
          ./gradlew clean bootBuildImage --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.semantic-release.outputs.new-release-version }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
