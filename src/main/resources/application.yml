spring:
  config:
    import: optional:dotenv:.env
  application:
    name: looper
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/looperdb_main_dev}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 10
  sql:
    init:
      mode: never
  jpa:
    hibernate:
      ddl-auto: update
  jackson:
    time-zone: Asia/Seoul
  kafka:
    bootstrap-servers: ${KAFKA_BASE_URL:localhost:9092}
    producer:
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
      auto-offset-reset: earliest
      group-id: consumer-group
    streams:
      bootstrap-servers: ${KAFKA_BASE_URL:localhost:9092}
      application-id: looper-streams-app
    properties:
      retries:
        3
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  data:
    redis:
      host: ${REDIS_HOSTNAME:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}

server:
  forward-headers-strategy: framework
  servlet:
    session:
      timeout: 60m

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    region:
      static: ${AWS_REGION:ap-northeast-2}
    stack:
      auto: true
    s3:
      bucket: ${S3_BUCKET:looper-dev-image-s3}
      profile-image-prefix: ${IMAGE_PREFIX:profile-images}
      initialize-profile-images: false

kakao:
  client-id: ${KAKAO_REST_API_KEY}

jwt:
  secret: ${JWT_SECRET}

fastapi:
  summary-url: ${FASTAPI_SUMMARY_URL:http://localhost:8000}
  chatbot-url: ${FASTAPI_CHATBOT_URL:http://localhost:8000}

# 현재는 OpenTelemetry가 시스템에 영향을 주지 않도록 완전히 비활성화함
otel:
  instrumentation:
    jdbc:
      enabled: false  # Hibernate와 충돌 방지
  traces:
    exporter: none  # 분산 추적 미사용
  metrics:
    exporter: none  # Prometheus 등으로 전송 안 함
  logs:
    exporter: none  # OTLP 로그 수집 중단

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
  endpoint:
    health:
      show-details: always  # 필요 시 의존성 상태를 자세히 표시
    metrics:
      access: read_only
    prometheus:
      access: read_only
  info:
    env:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

kafka:
  topics:
    chatbot:
      user-input: chatbot-user-input
      response: chatbot-response
    schedule:
      schedule
    notification:
      notification
    preview:
      preview-result
  consumer:
    chat-group-id: chat-group
    preview-group-id: preview-consumer-group
    notification-group-id: notification-service-group
    schedule-group-id: schedule-service-group

cache:
  project:
    ttl-seconds: 10800
    detail-key-prefix: "project:"
    list-key-prefix: "projects:user:"
  notification:
    ttl-seconds: 600
    user-key-prefix: "notifications:user:"

info:
  app:
    name: ${spring.application.name}
    version: 1.0.1
    description: Looper API 서버
