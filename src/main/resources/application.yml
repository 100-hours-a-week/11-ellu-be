spring:
  config:
    import: optional:dotenv:.env
  application:
    name: looper
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/looperdb_main_dev}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  sql:
    init:
      mode: never
  jpa:
    hibernate:
      ddl-auto: update

server:
  forward-headers-strategy: framework

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    region:
      static: ${AWS_REGION:ap-northeast-2}
    stack:
      auto: true
    s3:
      bucket: ${S3_BUCKET:looper-dev-image-s3}
      profile-image-prefix: ${IMAGE_PREFIX:profile-images}
      initialize-profile-images: false

kakao:
  client-id: ${KAKAO_REST_API_KEY}

jwt:
  secret: ${JWT_SECRET}

fastapi:
  base-url: ${FASTAPI_BASE_URL:http://localhost:8000}

kafka:
  bootstrap-servers: ${KAFKA_BASE_URL:127.0.0.1:9092}

# 현재는 OpenTelemetry가 시스템에 영향을 주지 않도록 완전히 비활성화함
otel:
  instrumentation:
    jdbc:
      enabled: false  # Hibernate와 충돌 방지
  traces:
    exporter: none  # 분산 추적 미사용
  metrics:
    exporter: none  # Prometheus 등으로 전송 안 함
  logs:
    exporter: none  # OTLP 로그 수집 중단

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
  endpoint:
    health:
      show-details: always  # 필요 시 의존성 상태를 자세히 표시
    metrics:
      access: read_only
    prometheus:
      access: read_only
  info:
    env:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

info:
  app:
    name: ${spring.application.name}
    version: 1.0.1
    description: Looper API 서버

logging:
  level:
    io.opentelemetry: DEBUG