plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.ellu.looper'
version = '1.4.6'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}

dependencies {
    // Spring 기본
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'         // MVC 서버
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // WebClient (비동기 HTTP 클라이언트)
    implementation 'org.springframework.boot:spring-boot-starter-validation' // @Valid 등 유효성 검증
    implementation 'org.springframework.boot:spring-boot-starter-actuator'   // 헬스 체크, 메트릭

    // Spring Security & OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JPA / DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
//    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // AWS (S3 등)
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.261'


    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.50.0'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.apache.kafka:kafka-clients:4.0.0'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.kafka:kafka-streams'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    // Swagger (API 문서)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:postgresql:1.21.0"
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // 개발 편의
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // hibernate types
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    // batch scheduler
//    implementation 'net.javacrumbs.shedlock:shedlock-spring:6.6.1'
//    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:6.6.1'

    //메트릭 수집을 위한 플러그인
    // Spring Boot Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Micrometer Prometheus registry
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // OpenTelemetry Spring Boot Starter
    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")

    // OpenTelemetry JDBC
    implementation("io.opentelemetry.instrumentation:opentelemetry-jdbc:2.16.0-alpha")
}
dependencyManagement {
    imports {
        mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.17.0")
    }
}

bootBuildImage {
    imageName = "${project.name}"
    buildpacks = [
        "paketo-buildpacks/java",
        "gcr.io/paketo-buildpacks/opentelemetry"
    ]
    environment = [
        "BP_JVM_VERSION"          : "21.*",
        "BP_OPENTELEMETRY_ENABLED": "true"
    ]
    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
